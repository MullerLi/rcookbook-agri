bookdown::render_book(input ="05-GLHG.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="index.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
git push
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="02-describe.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="03-ttest.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="04-anova.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="05-GLHG.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="index.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="02-describe.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="03-ttest.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="04-anova.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="05-GLHG.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="index.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="index.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
pkg <- 'ggplot2'
if ( !pkg %in% installed.packages()) install.packages(pkg)
library(ggplot2)
ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Petal.Width, color = Species))+
geom_jitter()+
geom_smooth(method='lm',se=F)+
theme_bw()+
labs(x='花萼長度(cm)',
y='花瓣寬度(cm)',
color = '品種',
title = '鳶尾花花萼長與花瓣寬線性關係')
# compaison: CK vs Herbicide
# 因子排列順序
riceHerbicide$treatment %>% levels()
coef(m)
# 特定線性模式
m <- lm(formula = yield ~ treatment + rep, data = riceHerbicide)
coef(m)
data.frame(coef(m))
apply(iris , 1 , mean)
apply(iris , 2 , mean)
iris
mean
apply(iris , 2 , mean)
sapply(iris  , mean)
apply(iris , 2 , mean)
2
apply(iris , 1 , mean)
apply(iris , 2 , mean)
lapply(iris , 2 , mean)
lapply(iris , 2 , mean)
lapply(iris ,  mean)
sapply(iris ,  mean)
sapply(iris ,  length)
# 各數值平均
apply(iris_df , mean)
# 各數值平均
apply(iris_df ,2, mean)
# 各數值平均
apply(iris ,2, mean)
# 各數值平均
apply(iris[1:4] ,2, mean)
# 各數值平均
# 因為第5欄是品種名稱，所以選取1~4欄[1:4]計算
apply(iris[1:4] ,2, mean)
split(iris , Species)
split(iris , 'Species')
split(iris , 'Species')
split(iris , 'Species')
?split(iris , 'Species')
split(iris , iris$Species)
split(iris , iris$Species)
apply(split(iris , iris$Species) , 2 , mean)
apply(split(iris , iris$Species) , 1 , mean)
# split 根據品種分組
split(iris , iris$Species)
apply( split(iris , iris$Species) ,2 ,apply( , 2 , mean))
lapply( split(iris , iris$Species) ,2 ,apply( , 2 , mean))
lapply( split(iris , iris$Species)  ,apply( , 2 , mean))
lapply( split(iris , iris$Species)  ,apply( .x, 2 , mean))
lapply( split(iris , iris$Species)  , function(x) apply( x, 2 , mean))
lapply( split(iris , iris$Species)[1:4]  , function(x) apply( x, 2 , mean))
lapply( split(iris , iris$Species)  , function(x) apply( x[1:4], 2 , mean))
# split 切開表格產生的list，將list物件依序傳入apply計算mean
lapply( split(iris , iris$Species)  , colMeans)
# split 切開表格產生的list，將list物件依序傳入apply計算mean
lapply( split(iris , iris$Species)  , function(x) colMeans(x[1:4]))
# split 切開表格產生的list，將list物件依序利用colMeans計算各column平均
myList <- split(iris , iris$Species)
lapply( myList, function(x) colMeans(x[1:4]))
?sapply
vapply
?vapply
?mapply
mapply(rep, 1:4, 4:1)
mapply(word, "A", integer()) # gave Error, now list()
mapply(rep, times = 1:4, x = 4:1)
?tapply
require(stats)
groups <- as.factor(rbinom(32, n = 5, prob = 0.4))
tapply(groups, groups, length)
groups
groups
groups
groups <- as.factor(rbinom(32, n = 5, prob = 0.4))
groups
groups
groups
groups
groups
groups
tapply(groups, groups, length)
index <- c("3", "4", "3", "2", "3", "4")
data_tapply <- tapply(data$height, index,mean)
data_tapply <- tapply(data$height, index,mean)
tapply(iris , iris$Species , mean)
tapply(iris , factor(iris$Species) , mean)
tapply(iris , as.factor(iris$Species) , mean)
unique(iris$Species)
tapply(iris, unique(iris$Species), mean)
lapply( myList, function(x) colMeans(x[1:4]))
myList[[1]]
data(mtcars)
split(mtcars  , mtcars$am)
sapply( myList , function(x) colMeans(x))
x
myList
myList <- split(mtcars  , mtcars$am)
myList
sapply( myList , function(x)
colMeans(x))
mtcars
?aggregate( mtcars , )
aggregate(. ~ vs+am,data=mtcars  )
aggregate( . ~ vs+am,
data=mtcars,
FUN = list(mean,length))
aggregate( . ~ vs+am,
data=mtcars,
FUN = mean)
aggregate( . ~ vs+am,
data=mtcars,
FUN = 'mean')
aggregate( . ~ vs+am,
data=mtcars,
FUN = c('mean','length'))
aggregate( . ~ vs+am,
data=mtcars,
FUN = c('mean','length'))
aggregate( . ~ vs+am,
data=mtcars,
FUN = c(mean,length))
aggregate( . ~ vs+am,
data=mtcars,
FUN = list(mean,length))
aggregate( . ~ vs+am,
data=mtcars,
list(mean,length))
aggregate( . ~ vs+am,
data=mtcars,
list('mean','length'))
aggregate( . ~ vs+am,
data=mtcars,
mean))
aggregate( . ~ vs+am,
data=mtcars,
mean)
sapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))
# 多對多分組計算
funlist <- list('mean','length','sd')
sapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))
lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))
lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))
Reduce(lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x)) , rbind)
Reduce(lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x)) , cbind)
Reduce(lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x)) , rbind)
lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))
lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))
# 多對多分組計算
funlist <- list(mean,length,sd)
lapply( funlist , function(x)
aggregate( . ~ vs+am,
data=mtcars, x)
)
Reduce
Reduce(rbind ,
lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))  )
Reduce(cbind ,
lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))  )
# 多對多分組計算
funlist <- list(mean,length,sd)
lapply( funlist , function(x)
z<-aggregate( . ~ vs+am,
data=mtcars, x)
colnames(z) <- paste0(colnames(z),as.character(x))
lapply( funlist , function(x)
z<-aggregate( . ~ vs+am,data=mtcars, x)
colnames(z) <- paste0(colnames(z),as.character(x))
lapply( funlist , function(x)
z<-aggregate( . ~ vs+am,data=mtcars, x)
colnames(z) <- paste0(colnames(z),as.character(x))
lapply( funlist , function(x)
z<-aggregate( . ~ vs+am,data=mtcars, x)
colnames(z) <- paste0(colnames(z),as.character(x))
colname
z <- aggregate( . ~ vs+am,data=mtcars, x)
# 多對多分組計算
funlist <- list(mean,length,sd)
lapply( funlist , function(x)
z <- aggregate( . ~ vs+am, data=mtcars, x)
colnames(z) <- paste0(colnames(z),as.character(x))
lapply( funlist , function(x)
z <- aggregate( . ~ vs+am, data=mtcars, x)
colnames(z) <- paste0(colnames(z),as.character(x))
lapply( funlist , function(x)
aggregate( . ~ vs+am, data=mtcars, x))
mtcars
aggregate( . ~ vs+am, data=mtcars,
FUN= function(x)
c("mean"= round(mean(x),2),
'±' = '±',
"SE"  = mean(x)/length(x),
'N'   = round(length(x),2),
"median" = round(median(x),2),
"SD"  = round(sd(x),2),
"CV"  = round(sd(x) / mean(x),2) ))
aggregate( . ~ vs+am, data=mtcars,
FUN= function(x)
c("mean"= round(mean(x),2),
'±' = '±',
"SE"  = mean(x)/length(x),
'N'   = round(length(x),2),
"median" = round(median(x),2),
"SD"  = round(sd(x),2),
"CV"  = round(sd(x) / mean(x),2) ))
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
g <- read.csv('D:/grain.csv')
library(tidyverse)
g
g[c(2,4),]
g[,c(2,4)]
g[,c(2,3)]
g[,c(2,8,9)]
g[,c(2,8,9)][order(1)]
g[,c(2,8,9)][order(colnames(g)[1])]
order(colnames(g)[1]
)
g[,c(2,8,9)]
g
g[,c(2,8,9)]
colnames(g)
g[c(2,5,10,12)]
g[c(2,5,11,12)]
colnames(g)
g[c(2,5,10,12)]
df<-data.frame( '品種'=rep(letters[1:3],each=10),
'產量'= c(rnom(10 , mean=10,sd=5) ,rnom(10 , mean=10,sd=5)rnom(10 , mean=10,sd=5)   ))
df<-data.frame( '品種'=rep(letters[1:3],each=10),
'產量'= c(rnorm(10 , mean=10,sd=5) ,rnom(10 , mean=10,sd=5)rnom(10 , mean=10,sd=5)   ))
df<-data.frame( '品種'=rep(letters[1:3],each=10),
'產量'= c( rnorm(10 , mean=10,sd=5),
rnom(10 , mean=10,sd=5),
rnom(10 , mean=10,sd=5)   ))
df<-data.frame( '品種'=rep(letters[1:3],each=10),
'產量'= c( rnorm(10 , mean=10,sd=5),
rnorm(10 , mean=10,sd=5),
rnorm(10 , mean=10,sd=5)   ))
df
df<-data.frame( '品種'=rep(letters[1:3],each=10),
'產量'= c( rnorm(10 , mean=10,sd=5),
rnorm(10 , mean=20,sd=5),
rnorm(10 , mean=30,sd=5)))
df
plot(x = df$品種,y=df$產量)
df<-data.frame( '品種'=rep(letters[1:3],each=10),
'產量'= c( rnorm(10 , mean=10,sd=5),
rnorm(10 , mean=20,sd=5),
rnorm(10 , mean=30,sd=5)))
histplot(x = df$品種,y=df$產量)
hist(x = df$品種,y=df$產量)
hist(x = df$品種)
plot(df)
df<-data.frame( '品種'=rep(letters[1:3],each=10),
'產量'= c( rnorm(10 , mean=10,sd=5),
rnorm(10 , mean=20,sd=5),
rnorm(10 , mean=30,sd=5)))
df<-data.frame( '品種'=rep(letters[1:3],each=10),
df
( rnorm(10 , mean=10,sd=5),
rnorm(10 , mean=20,sd=5),
rnorm(10 , mean=30,sd=5))
)
function (x, df1, df2, ncp, log = FALSE)
mdf<-data.frame( '品種'=rep(letters[1:3],each=10),
'產量'= c( rnorm(10 , mean=10,sd=5),
rnorm(10 , mean=20,sd=5),
rnorm(10 , mean=30,sd=5)))
plot(mdf)
mdf<-data.frame( '品種'=rep(letters[1:3],each=10),
'產量'= c( rnorm(10 , mean=10,sd=5),
rnorm(10 , mean=20,sd=5),
rnorm(10 , mean=30,sd=5)))
plot(mdf)
hist(df$df.rnorm.10..mean...10..sd...5...rnorm.10..mean...20..sd...5...)
hist(mdf$產量)
polygon(mdf$產量)
d <- density(mtcars$mpg)
plot(d, main="Kernel Density of Miles Per Gallon")
polygon(d, col="red", border="blue")
plot(d, main="Kernel Density of Miles Per Gallon")
d <- density(mdf$產量)
plot(d, main="Kernel Density of Miles Per Gallon")
polygon(d, col="red", border="blue")
mdf<-data.frame( '品種'=rep(letters[1:3],each=10),
'產量'= c( rnorm(100 , mean=10,sd=5),
rnorm(100 , mean=20,sd=5),
rnorm(100 , mean=30,sd=5)))
d <- density(mdf$產量)
plot(d, main="Kernel Density of Miles Per Gallon")
mdf<-data.frame( '品種'=rep(letters[1:3],each=10),
'產量'= c( rnorm(100 , mean=100,sd=5),
rnorm(100 , mean=200,sd=5),
rnorm(100 , mean=300,sd=5)))
d <- density(mdf$產量)
plot(d, main="Kernel Density of Miles Per Gallon")
ggplot(dat, aes(x=rating, fill=cond)) + geom_density(alpha=.3)
library(tidyverse)
ggplot(mdf, aes(x=品種, fill=產量)) + geom_density(alpha=.3)
mdf<-data.frame( '品種'=rep(letters[1:3],each=10),
'產量'= c( rnorm(100 , mean=10,sd=5),
rnorm(100 , mean=20,sd=5),
rnorm(100 , mean=30,sd=5)))
ggplot(mdf, aes(x=品種, fill=產量)) + geom_density(alpha=.3)
ggplot(mdf, aes(x=品種, fill=產量)) +
geom_density()
mdf<-data.frame( '品種'=rep(letters[1:3],each=100),
'產量'= c( rnorm(100 , mean=10,sd=5),
rnorm(100 , mean=20,sd=5),
rnorm(100 , mean=30,sd=5)))
ggplot(mdf, aes(x=品種, fill=產量)) +
geom_density()
mdf
rnorm(100 , mean=10,sd=5)
rep(letters[1:3],each=100)
mdf <- data.frame( '品種'=rep(letters[1:3],each=100),
'產量'= c( rnorm(100 , mean=10,sd=10),
rnorm(100 , mean=20,sd=10),
rnorm(100 , mean=30,sd=10)))
ggplot(mdf, aes(x=品種, fill=產量)) +
geom_density()
mdf$品種 <- factor(mdf$品種)
ggplot(mdf, aes(x=品種, fill=產量)) +
geom_density()
ggplot(mdf, aes(x=品種, fill=產量)) +
?geom_density()
ggplot(mdf, aes(x=產量, color=品種)) +
geom_density()+
geom_vline(data=mu, aes(xintercept=grp.mean, color=sex),
linetype="dashed")
ggplot(mdf, aes(x=產量, color=品種)) +
geom_density()+
```
ggplot(mdf, aes(x=產量, color=品種)) +
geom_density()+
```
mdf <- data.frame( '品種'= rep(letters[1:3],each=100),
'產量'= c( rnorm(100 , mean=10,sd=10),
rnorm(100 , mean=20,sd=10),
rnorm(100 , mean=30,sd=10)))
mdf$品種 <- factor(mdf$品種)
ggplot(mdf, aes(x=產量, color=品種)) +
geom_density()+
```
ggplot(mdf, aes(x=y, color=x)) +
geom_density()+
```
mdf <- data.frame( 'x'= rep(letters[1:3],each=100),
'y'= c( rnorm(100 , mean=10,sd=10),
rnorm(100 , mean=20,sd=10),
rnorm(100 , mean=30,sd=10)))
mdf$品種 <- factor(mdf$品種)
ggplot(mdf, aes(x=y, color=x)) +
geom_density()+
```
mdf <- data.frame( '品種'= rep(letters[1:3],each=100),
'產量'= c( rnorm(100 , mean=10,sd=10),
rnorm(100 , mean=20,sd=10),
rnorm(100 , mean=30,sd=10)))
mdf$品種 <- factor(mdf$品種)
ggplot(mdf, aes(x=產量, color=品種)) +
geom_density()+
```
mdf$品種 <- factor(mdf$品種)
mdf
letters[1:3]
table(mdf)
mdf <- data.frame( '品種'= rep(letters[1:3],each=100),
'產量'= c( rnorm(100 , mean=10,sd=10),
rnorm(100 , mean=20,sd=10),
rnorm(100 , mean=30,sd=10)))
mdf$品種 <- factor(mdf$品種)
ggplot(mdf, aes(x=產量, color=品種)) +
geom_density()+
```
ggplot(mdf, aes(x=產量, color=品種)) +
geom_histogram()+
```
ggplot(mdf, aes(y=產量,color=品種)) +
geom_histogram()+
```
mdf <- data.frame( '品種'= rep(letters[1:3],each=100),
'產量'= c( rnorm(100 , mean=10,sd=10),
rnorm(100 , mean=20,sd=10),
rnorm(100 , mean=30,sd=10)))
mdf$品種 <- factor(mdf$品種)
ggplot(mdf, aes(y=產量,color=品種)) +
geom_histogram()+
```
library(agricolae)
data()
data(corn)
corn
data(rice)
rice
data(LxT)
LxT
data(cotton)
cotton
data(melon)
melon
data(melon)
aov(variety~yield , melon)
iris
str(iris)
data(rubber)
riceYield <- data.frame('var'=rep(letters[1:3],each=20),
'yield'= c(rnorm(20,mean=50,sd=10),rnorm(20,mean=70,sd=10),rnorm(20,mean=80,sd=10) ))
riceYield
aov(yield~var,riceYield)
str(riceYield)
str(riceYield)
# var轉為factor
riceYield$var <- factor(riceYield$var,levels = c('a','b','c'))
str(riceYield)
class(riceYield$var)
aov(yield~var , riceYield) %>% summary
# 產生資料
riceYield <- data.frame('var'  = rep(letters[1:3],each=20),
'block'= rep(rep( LETTERS[1:2], each=10),each=3),
'yield'= c(rnorm(20,mean=50,sd=10),
rnorm(20,mean=70,sd=10),
rnorm(20,mean=80,sd=10)))
# str查看資料類型
str(riceYield)
riceYield
rep(rep( LETTERS[1:2], each=10),each=3)
rep( LETTERS[1:2], each=10)
rep(rep( LETTERS[1:2], each=10),3)
# 產生資料
riceYield <- data.frame('var'  = rep(letters[1:3],each=20),
'block'= rep(rep( LETTERS[1:2], each=10),3),
'yield'= c(rnorm(20,mean=50,sd=10),
rnorm(20,mean=70,sd=10),
rnorm(20,mean=80,sd=10)))
riceYield
# 產生資料
riceYield <- data.frame('var'  = rep(letters[1:3],each=20),
'block'= rep(rep( LETTERS[1:2], each=10),3),
'yield'= c(rnorm(20,mean=50,sd=10),
rnorm(20,mean=70,sd=10),
rnorm(20,mean=80,sd=10)))
# str查看資料類型
str(riceYield)
riceYield$block <- factor(riceYield$block,levels = c('A','B'))
# var和block轉為factor
riceYield$var <- factor(riceYield$var,levels = c('a','b','c'))
riceYield$block <- factor(riceYield$block,levels = c('A','B'))
# var的類型
class(riceYield$var)
aov(yield~var , riceYield) %>% summary
aov(yield~var+block , riceYield) %>% summary
?anova()
anova(yield~var+block , riceYield)
anova(lm(yield~var+block , riceYield))
out %>% as.data.frame()
out <- aov(yield~var+block , riceYield) %>% summary
out %>% as.data.frame()
out %>% as.data.frame
out <- aov(yield~var+block , riceYield) %>% summary
out
out %>% data.frame
out %>% tibble
