# 產生model物件
mod1 <- lm(yield ~ loc*var+rep,rice)
(mod1)
# 交感顯著，品種不顯著
anova(mod1)
rice <- read.csv('dataset/riceYield.csv')
# 產生model物件
mod1 <- lm(yield ~ loc*var+rep,rice)
# 交感顯著，品種不顯著
anova(mod1)
LSD.test(mod1 , trt = c('loc','var'))
LSD.test(mod1 , trt = c('loc','var'))$group
L1$groups
# 品種不顯著，栽培地區顯著
# 交感顯著
anova(mod1)
LSD.test(mod1 , trt = c('loc','var'))$group
L1
L1 <- LSD.test(mod1 , trt = c('loc','var'))$group
L1$mean
L1$means
L1 <- LSD.test(mod1 , trt = c('loc','var'))$group
L1$means
L1
L1 <- LSD.test(mod1 , trt = c('loc','var'))
L1$means
data.frame(trt = rownames(L1$means))
DLSD <-function ( dat , lm_formu , treatment , to_csv = F){
require(tidyverse)
data_name <- deparse(substitute(dat))
model <- lm(data = dat , formula = lm_formu)
o <- as.data.frame(anova(model))
colnames(o) <- c('DF','SS','MS','F','P')
df1 <- o %>% mutate('Sig'= case_when( P > 0.1 ~ 'ns',
P > 0.05 & P <= 0.1 ~ '*',
P > 0.001 & P <= 0.05 ~'**',
P > 0 & P <= 0.001 ~ '***',
TRUE ~ 'NA') ,
'Response' = all.vars(lm_formu)[1]) %>%
mutate(across(where(is.double) , ~round(.x,digits = 4)))
x <- LSD.test( model , trt=  as.character(treatment))
Var <- row.names (x$groups)
newGroup <- data.frame ( Var , x$groups[,1:2] )
sort <- newGroup [ order ( newGroup$Var ), ]
rownames(sort) <- c()
df2 <- data.frame (sort,
"N"   = x$means [,3],
"SEM" = x$means[,2]/sqrt(x$means[,3]),
"SD"  = x$means[,2],
"CV"  = x$means[,2]/x$means[,1]) %>%
mutate(across(where(is_double),~round(.x,digits=2)))
names(df2) <- c( "Factor","Mean", "Sign","n" , "SEM",  "SD" ,"CV")
listout <-list(df1,df2)
if(to_csv == TRUE){file_name <- paste0('ANOVA_',paste0(data_name),"by",all.vars(lm_formu)[1],format(Sys.time(), "%m%d%H%M%S"))
path <- paste0('D:/',file_name,'.csv')
listout %>% capture.output %>% write.csv(path)
cat('\n Data had been outputted to', path,'\n \n')
return(listout)
else if (to_csv == FALSE) return ( listout )
DLSD <-function ( dat , lm_formu , treatment , to_csv = F){
require(tidyverse)
data_name <- deparse(substitute(dat))
model <- lm(data = dat , formula = lm_formu)
o <- as.data.frame(anova(model))
colnames(o) <- c('DF','SS','MS','F','P')
df1 <- o %>% mutate('Sig'= case_when( P > 0.1 ~ 'ns',
P > 0.05 & P <= 0.1 ~ '*',
P > 0.001 & P <= 0.05 ~'**',
P > 0 & P <= 0.001 ~ '***',
TRUE ~ 'NA') ,
'Response' = all.vars(lm_formu)[1]) %>%
mutate(across(where(is.double) , ~round(.x,digits = 4)))
x <- LSD.test( model , trt=  as.character(treatment))
Var <- row.names (x$groups)
newGroup <- data.frame ( Var , x$groups[,1:2] )
sort <- newGroup [ order ( newGroup$Var ), ]
rownames(sort) <- c()
df2 <- data.frame (sort,
"N"   = x$means [,3],
"SEM" = x$means[,2]/sqrt(x$means[,3]),
"SD"  = x$means[,2],
"CV"  = x$means[,2]/x$means[,1]) %>%
mutate(across(where(is_double),~round(.x,digits=2)))
names(df2) <- c( "Factor","Mean", "Sign","n" , "SEM",  "SD" ,"CV")
listout <-list(df1,df2)
if(to_csv == TRUE){file_name <- paste0('ANOVA_',paste0(data_name),"by",all.vars(lm_formu)[1],format(Sys.time(), "%m%d%H%M%S"))
path <- paste0('D:/',file_name,'.csv')
listout %>% capture.output %>% write.csv(path)
cat('\n Data had been outputted to', path,'\n \n')
return(listout)}else if (to_csv == FALSE) {return ( listout )}
}
DLSD()
DLSD(rice , mod1$call , F)
DLSD(rice , mod1$call,treatment = c('loc','var') , F)
DLSD(rice , mod1$call,treatment = c('loc','var') , t)
DLSD(rice , mod1$call,treatment = c('loc','var') , Y)
DLSD(rice , mod1$call,treatment = c('loc','var') , T)
L1 <- LSD.test(mod1 , trt = c('loc','var'))$
```
L1 <- LSD.test(mod1 , trt = c('loc','var'))
L1$means
L1$means[1:2]
data.frame( 'mean' = L1$means[1],'+-'='±','SEM'=L1$means[2])
data.frame( 'mean' = L1$means[1],'±'='±','SEM'=L1$means[2])
data.frame( 'mean' = L1$means[1],'x'='±','SEM'=L1$means[2],
L1$groups)
d1<-data.frame(trt = rownames(d1) 'mean' = L1$means[1],'x'='±','SEM'=L1$means[2])
d1<-data.frame(trt = rownames(d1) ,'mean' = L1$means[1],'x'='±','SEM'=L1$means[2])
d1<-data.frame(trt = rownames(L1$means) ,'mean' = L1$means[1],'x'='±','SEM'=L1$means[2])
d1
L1$groups
rbind(L1$groups,d1)
cbind(L1$groups,d1)
L1$means
L1 <- LSD.test(mod1 , trt = c('loc','var'))
L1$means
L1$groups
cbind(L1$groups,d1)
data.frame('trt'=rownames(L1$means),'LSD'=L1$groups[2:3])
data.frame('trt'=rownames(L1$means),L1$groups[2:3])
L1$groups[2:3]
data.frame('trt'=rownames(L1$means),L1$groups[2])
data.frame('trt'=rownames(L1$means),L1$groups)
d1<-data.frame('trt'=rownames(L1$means),L1$groups)
cbind(L1$groups,d1)
d1<-data.frame(trt = rownames(L1$means) ,'mean' = L1$means[1],'x'='±','SEM'=L1$means[2])
d2<-data.frame('trt'=rownames(L1$means),L1$groups)
cbind(d1,d2)
d1<-data.frame(trt = rownames(L1$means) ,
'mean' =L1$means[1],
'x'='±',
'SEM'=L1$means[2])
d1<-data.frame(trt = rownames(L1$means) ,
'mean' =L1$means[1],
'x'='±',
'SEM'=L1$means[2])
d2<-data.frame('trt'=rownames(L1$means),
L1$groups)
cbind(d1,d2)
d2<-data.frame('trt'=rownames(L1$means),
L1$groups)
cbind(d1,d2,by='trt')
merge(d1,d2,by='trt')
d2<-data.frame('trt'=rownames(L1$means),
L1$groups[2])
merge(d1,d2,by='trt')
round(o,2)
o<-merge(d1,d2,by='trt')
round(o,2)
o
path <- paste0('D:/',file_name,'.csv')
return(listout)}else if (to_csv == FALSE) {return ( listout )}
# 執行一次就好
dlsd <-function ( dat , lm_formu , treatment , to_csv = F){
require(tidyverse)
data_name <- deparse(substitute(dat))
model <- lm(data = dat , formula = lm_formu)
o <- as.data.frame(anova(model))
colnames(o) <- c('DF','SS','MS','F','P')
df1 <- o %>% mutate('Sig'= case_when( P > 0.1 ~ 'ns',
P > 0.05 & P <= 0.1 ~ '*',
P > 0.001 & P <= 0.05 ~'**',
P > 0 & P <= 0.001 ~ '***',
TRUE ~ 'NA') ,
'Response' = all.vars(lm_formu)[1]) %>%
mutate(across(where(is.double) , ~round(.x,digits = 4)))
x <- LSD.test( model , trt=  as.character(treatment))
Var <- row.names (x$groups)
newGroup <- data.frame ( Var , x$groups[,1:2] )
sort <- newGroup [ order ( newGroup$Var ), ]
rownames(sort) <- c()
df2 <- data.frame (sort,
"N"   = x$means [,3],
"SEM" = x$means[,2]/sqrt(x$means[,3]),
"SD"  = x$means[,2],
"CV"  = x$means[,2]/x$means[,1]) %>%
mutate(across(where(is_double),~round(.x,digits=2)))
names(df2) <- c( "Factor","Mean", "Sign","n" , "SEM",  "SD" ,"CV")
listout <-list(df1,df2)
if(to_csv == TRUE){file_name <- paste0('ANOVA_',paste0(data_name),"by",all.vars(lm_formu)[1],format(Sys.time(), "%m%d%H%M%S"))
path <- paste0('D:/',file_name,'.csv')
listout %>% capture.output %>% write.csv(path)
cat('\n Data had been outputted to', path,'\n \n')
return(listout)}else if (to_csv == FALSE) {return ( listout )}
}
dlsd(riceYield)
dlsd(riceYield,lm_formu = yield~loc*var+block,to_csv = F)
dlsd(rice,lm_formu = yield~loc*var+block,to_csv = F)
dlsd(rice,lm_formu = yield~loc*var+rep,to_csv = F)
dlsd(rice,lm_formu = yield~loc*var+rep,treatment=c('loc','var'),to_csv = F)
dlsd(rice,
lm_formu = yield~loc*var+rep,
treatment=c('loc','var'),
to_csv = F)
# 執行一次就好
dlsd <-function ( dat , lm_formu , treatment , to_csv = F){
require(tidyverse)
data_name <- deparse(substitute(dat))
model <- lm(data = dat , formula = lm_formu)
o <- as.data.frame(anova(model))
colnames(o) <- c('DF','SS','MS','F','P')
df1 <- o %>% mutate('Sig'= case_when( P > 0.1 ~ 'ns',
P > 0.05 & P <= 0.1 ~ '*',
P > 0.001 & P <= 0.05 ~'**',
P > 0 & P <= 0.001 ~ '***',
TRUE ~ 'NA') ,
'Response' = all.vars(lm_formu)[1]) %>%
mutate(across(where(is.double) , ~round(.x,digits = 4)))
x <- LSD.test( model , trt=  as.character(treatment))
Var <- row.names (x$groups)
newGroup <- data.frame ( Var , x$groups[,1:2] )
sort <- newGroup [ order ( newGroup$Var ), ]
rownames(sort) <- c()
df2 <- data.frame (sort,
"N"   = x$means [,3],
"SEM" = x$means[,2]/sqrt(x$means[,3]),
"SD"  = x$means[,2],
"CV"  = x$means[,2]/x$means[,1]) %>%
mutate(across(where(is_double),~round(.x,digits=2)))
names(df2) <- c( "Factor","Mean", "Sign","n" , "SEM",  "SD" ,"CV")
listout <-list(df1,df2)
if(to_csv == TRUE){file_name <- paste0('ANOVA_',paste0(data_name),"by",all.vars(lm_formu)[1],format(Sys.time(), "%m%d%H%M%S"))
path <- paste0('D:/',file_name,'.csv')
listout %>% capture.output %>% write.csv(path)
cat('\n Data had been outputted to', path,'\n \n')
return(listout)}else if (to_csv == FALSE) {return ( listout )}
}
dlsd(rice,
lm_formu = yield~loc*var+rep,
treatment=c('loc','var'),
to_csv = F)
require(agricolae)
require(tidyverse)
data_name <- deparse(substitute(dat))
model <- lm(data = dat , formula = lm_formu)
# 執行一次就好
dlsd <-function ( dat , lm_formu , treatment , to_csv = F){
require(agricolae)
require(tidyverse)
data_name <- deparse(substitute(dat))
model <- lm(data = dat , formula = lm_formu)
o <- as.data.frame(anova(model))
colnames(o) <- c('DF','SS','MS','F','P')
df1 <- o %>% mutate('Sig'= case_when( P > 0.1 ~ 'ns',
P > 0.05 & P <= 0.1 ~ '*',
P > 0.001 & P <= 0.05 ~'**',
P > 0 & P <= 0.001 ~ '***',
TRUE ~ 'NA') ,
'Response' = all.vars(lm_formu)[1]) %>%
mutate(across(where(is.double) , ~round(.x,digits = 4)))
x <- LSD.test( model , trt=  as.character(treatment))
Var <- row.names (x$groups)
newGroup <- data.frame ( Var , x$groups[,1:2] )
sort <- newGroup [ order ( newGroup$Var ), ]
rownames(sort) <- c()
df2 <- data.frame (sort,
"N"   = x$means [,3],
"SEM" = x$means[,2]/sqrt(x$means[,3]),
"SD"  = x$means[,2],
"CV"  = x$means[,2]/x$means[,1]) %>%
mutate(across(where(is_double),~round(.x,digits=2)))
names(df2) <- c( "Factor","Mean", "Sign","n" , "SEM",  "SD" ,"CV")
listout <-list(df1,df2)
if(to_csv == TRUE){file_name <- paste0('ANOVA_',paste0(data_name),"by",all.vars(lm_formu)[1],format(Sys.time(), "%m%d%H%M%S"))
path <- paste0('D:/',file_name,'.csv')
listout %>% capture.output %>% write.csv(path)
cat('\n Data had been outputted to', path,'\n \n')
return(listout)}else if (to_csv == FALSE) {return ( listout )}
}
dlsd(rice,
lm_formu = yield~loc*var+rep,
treatment=c('loc','var'),
to_csv = F)
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="02-describe.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="04-anova.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="index.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="04-anova.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
install.packages('rmarkdown')
install.packages('tidyverse')
lm(Sepal.Length~Species ,iris) %>% anova %>% data.frame
library(tidyverse)
lm(Sepal.Length~Species ,iris) %>% anova %>% data.frame
library(tidyverse)
data(iris)
# aov 可直接輸入formula，但需要用sumary提取結果
aov(Sepal.Length~Species ,iris) %>% summary
# lm物件創建線性模式物件，anova則對該物件進行ANOVA
lm(Sepal.Length~Species ,iris) %>% anova
library(tidyverse)
data(iris)
# aov 可直接輸入formula，但需要用sumary提取結果
aov(Sepal.Length~Species ,iris) %>% summary
# lm物件創建線性模式物件，anova則對該物件進行ANOVA
lm(Sepal.Length~Species ,iris) %>% anova
aov(Sepal.Length~Species ,iris) %>% summary
lm(Sepal.Length~Species ,iris) %>% anova
lm(Sepal.Length~Species ,iris) %>% anova %>% data.frame
# 品種不顯著，栽培地區顯著
# 交感顯著
anova(mod1)
LSD.test(mod1 , trt = c('loc','var'))$group
library(agricolae)
LSD.test(mod1 , trt = c('loc','var'))$group
L1 <- LSD.test(mod1 , trt = c('loc','var'))
d1<-data.frame(trt = rownames(L1$means) ,
'mean' =L1$means[1],
'x'='±',
'SEM'=L1$means[2])
d2<-data.frame('trt'=rownames(L1$means),
L1$groups[2])
o<-merge(d1,d2,by='trt')
o
dlsd(rice,
lm_formu = yield~loc*var+rep,
treatment=c('loc','var'),
to_csv = F)
rice
rice
ggplot(data=rice,mapping=aes(x=var,y=loc))
ggplot(data=rice,mapping=aes(x=c(var,loc))
rice
rice
ggplot(data=rice,mapping=aes(x=c(var,loc),y=yield))
ggplot(data=rice,mapping=aes(x=paste0(var,loc),y=yield))
ggplot(data=rice,mapping=aes(x=paste0(var,'+',loc),y=yield))
ggplot(data=rice,mapping=aes(x=paste0(var,'+',loc),y=yield))+
geom_bar()
ggplot(data=rice,mapping=aes(x=paste0(var,'+',loc),y=yield))+
geom_histogram()
ggplot(data=rice,mapping=aes(x=paste0(var,'+',loc),y=yield))+
geom_histogram(y=yield)
rm(list=ls())
#### Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_241') # run after installing x64 java
data.file = file.choose() # choose 1070405_csy890貯存_0月.xlsx
data.file
data.file
data.file,fixed
"\\",data.file,fixed
####
if(grepl("\\",data.file,fixed=TRUE)) data.file=gsub("\\","/",data.file,fixed=TRUE)
nn = unlist(strsplit(data.file,"/"))
setwd(paste(nn[-length(nn)],collapse="/"))
nn
setwd
paste(nn[-length(nn)],collapse="/")
library(XLConnect)
library(lsmeans)
library(emmeans)
### data input and clean
score.mat = c(-1.35,-0.76,-0.35,0,0.35,0.76,1.35)
names(score.mat) = -3:3
KE = vector("list",6)
KE
dataIn = loadWorkbook(data.file)
dataIn
dataIn
dataIn = loadWorkbook(data.file)
for (i in 1:6) {
KEi = readWorksheet(dataIn,paste0("KE",i),1,1,0,0)
KEi$rank[KEi$rank=="."] = NA
KEi$rank = as.numeric(score.mat[KEi$rank])
KEi$variety = as.factor(KEi$variety)
KEi$people = as.factor(KEi$people)
aov.out = lm(rank~rep+people+variety,data=KEi)
lout = summary(lsmeans(aov.out,"variety"))
ciL = lout$lsmean-qt(1-0.05/nlevels(KEi$variety)/2,lout$df[1])*lout$SE
ciU = lout$lsmean+qt(1-0.05/nlevels(KEi$variety)/2,lout$df[1])*lout$SE
KE[[i]] = data.frame(lout[,c(1:3)],ciL,ciU,group=LETTERS[apply(cbind(ciL,ciU),1,function(x){findInterval(0,x)+1})])
}
KE
### format the output file
name=c("外觀", "香味", "口味", "黏性", "硬性", "總評")
if(file.exists("output_confidenceInterval.csv")) file.remove("output_confidenceInterval.csv")
for (i in 1:6){
cat("\n",name[i],"\n",file="output_confidenceInterval.csv",append=TRUE)
write(colnames(KE[[i]]),ncol=ncol(KE[[i]]),file="output_confidenceInterval.csv",sep=",",append=TRUE)
write.table(KE[[i]],file="output_confidenceInterval.csv",col.names=FALSE,row.names=FALSE,quote=FALSE,sep=",",append=TRUE)
}
KE[[i]]
lsmeans
lsmeans(aov.out,"variety")
aov.out = lm(rank~rep+people+variety,data=KEi)
aov.out
lout
lout$lsmean
### format the output file
name=c("外觀", "香味", "口味", "黏性", "硬性", "總評")
if(file.exists("output_confidenceInterval.csv")) file.remove("output_confidenceInterval.csv")
for (i in 1:6){
cat("\n",name[i],"\n",file="output_confidenceInterval.csv",append=TRUE)
write(colnames(KE[[i]]),ncol=ncol(KE[[i]]),file="output_confidenceInterval.csv",sep=",",append=TRUE)
write.table(KE[[i]],file="output_confidenceInterval.csv",col.names=FALSE,row.names=FALSE,quote=FALSE,sep=",",append=TRUE)
}
all.tab = sapply(KE,function(x){paste(format(round(x$lsmean,3),nsmall=3L),as.character(x$group),sep=",")})
write(c("品種編號,",paste0(name,",,")),ncol=length(name)+1,file="output_meanTable.csv",sep="")
write.table(data.frame(1:nrow(all.tab),all.tab),file="output_meanTable.csv",col.names=FALSE,row.names=FALSE,quote=FALSE,sep=",",append=TRUE)
setwd
setwd()
dir
dir()
os.dir()
nn
data.file
wxp
colnames(KE[[i]])
ncol=ncol(KE[[i]])
ncol
write(colnames(KE[[i]]),ncol=ncol(KE[[i]]),file="output_confidenceInterval.csv",sep=",",append=TRUE)
cat("\n",name[i],"\n",file="output_confidenceInterval.csv",append=TRUE)
write(colnames(KE[[i]]),ncol=ncol(KE[[i]]),file="output_confidenceInterval.csv",sep=",",append=TRUE)
write.table(KE[[i]],file="output_confidenceInterval.csv",col.names=FALSE,row.names=FALSE,quote=FALSE,sep=",",append=TRUE)
findInterval
### format the output file
name=c("外觀", "香味", "口味", "黏性", "硬性", "總評")
findInterval(0,x)
?findInterval(0,x)
x <- 2:18
v <- c(5, 10, 15) # create two bins [5,10) and [10,15)
cbind(x, findInterval(x, v))
N <- 100
X <- sort(round(stats::rt(N, df = 2), 2))
tt <- c(-100, seq(-2, 2, length.out = 201), +100)
it <- findInterval(tt, X)
### format the output file
name=c("外觀", "香味", "口味", "黏性", "硬性", "總評")
it
tt <- c(-100, seq(-2, 2, length.out = 201), +100)
tt
cbind(x, findInterval(x, v))
N <- 100
N
X <- sort(round(stats::rt(N, df = 2), 2))
X
tt <- c(-100, seq(-2, 2, length.out = 201), +100)
it <- findInterval(tt, X)
it
x <- 1:18
u <- c(3,6,12)
v <- c(5,10,15)
data.frame(x, loc_lower = findInterval(x, u), loc_upper = findInterval(x, v + 1))
loc_lower
findInterval(x, u)
findInterval(x,cc)
cc<- c(2,4,6)
findInterval(x,cc)
c(x,c,findInterval(x,cc))
data.frame(x,c,findInterval(x,cc))
data.frame(c(x,c,findInterval(x,cc)))
data.framec('x'=x,'c'=c,'z'=findInterval(x,cc))
data.frame('x'=x,'c'=c,'z'=findInterval(x,cc))
x <- 1:10
cc<- c(2,4,6)
data.frame('x'=x,'z'=findInterval(x,cc))
x <- 1:5
cc<- c(2,4,6)
data.frame('x'=x,'z'=findInterval(x,cc))
cc<- c(3)
data.frame('x'=x,'z'=findInterval(x,cc))
cc<- c(5)
data.frame('x'=x,'z'=findInterval(x,cc))
cc<- c(4)
data.frame('x'=x,'z'=findInterval(x,cc))
cc<- c(1,3,5)
data.frame('x'=x,'z'=findInterval(x,cc))
data.frame('x'=x,'z'=findInterval(x,cc+1))
LETTERS[[findInterval(x,cc)]]
LETTERS[[findInterval(x,cc)[1]]]
LETTERS[[findInterval(x,cc)[2]]]
KEi
KEi
KEi$people = as.factor(KEi$people)
KEi$people
lsmeans(aov.out,"variety")
?lsmeans(aov.out,"variety")
lout = summary(lsmeans(aov.out,"variety"))
lout
ciL = lout$lsmean-qt(1-0.05/nlevels(KEi$variety)/2,lout$df[1])*lout$SE
ciU = lout$lsmean+qt(1-0.05/nlevels(KEi$variety)/2,lout$df[1])*lout$SE
ciU
ciL
lout$lsmean-qt(1-0.05/nlevels(KEi$variety)/2,lout$df[1])*lout$SE
data.frame(lout[,c(1:3)],ciL,ciU,group=LETTERS[apply(cbind(ciL,ciU),1,function(x){findInterval(0,x)+1})])
summary(lsmeans(aov.out,"variety"))
lout$lsmean-qt(1-0.05/nlevels(KEi$variety)/2,lout$df[1])*lout$SE
lout$lsmean+qt(1-0.05/nlevels(KEi$variety)/2,lout$df[1])*lout$SE
data.frame(lout[,c(1:3)],ciL,ciU,group=LETTERS[apply(cbind(ciL,ciU),1,function(x){findInterval(0,x)+1})])
for (i in 1:6){
cat("\n",name[i],"\n",file="output_confidenceInterval.csv",append=TRUE)
write(colnames(KE[[i]]),ncol=ncol(KE[[i]]),file="output_confidenceInterval.csv",sep=",",append=TRUE)
write.table(KE[[i]],file="output_confidenceInterval.csv",col.names=FALSE,row.names=FALSE,quote=FALSE,sep=",",append=TRUE)
}
all.tab = sapply(KE,function(x){paste(format(round(x$lsmean,3),nsmall=3L),as.character(x$group),sep=",")})
write(c("品種編號,",paste0(name,",,")),ncol=length(name)+1,file="output_meanTable.csv",sep="")
write.table(data.frame(1:nrow(all.tab),all.tab),file="output_meanTable.csv",col.names=FALSE,row.names=FALSE,quote=FALSE,sep=",",append=TRUE)
score.mat
x
lout[,c(1:3)]
ciL
KE[[i]] = data.frame(lout[,c(1:3)],ciL,ciU,group=LETTERS[apply(cbind(ciL,ciU),1,function(x){findInterval(0,x)+1})])
KE
lout
SE
lout
lout$SE
ciL
cbind(ciL,ciU)
findInterval(0,-0.01334227 )+1
findInterval(0,-0.01334227 )
LETTERS[apply(cbind(ciL,ciU),1,function(x){findInterval(0,x)+1})])
