m2 %>% anova
L2 <- LSD.test(m2, trt='treatment')
require(agricolae)
L2 <- LSD.test(m2, trt='treatment')
L2$group
# compaison: CK vs Herbicide
# 因子排列順序
riceHerbicide$treatment %>% levels()
# 特定線性模式
glht( m2 , linfct = mcp( treatment = 'Tukey')) %>%
summary
require(tidyverse)
require(magrittr)
require(agricolae)
require(multcomp)
require(emmeans)
riceHerbicide <- read.csv('dataset/riceHerbicide.csv')
riceHerbicide %>% str
require(tidyverse)
require(magrittr)
require(agricolae)
require(multcomp)
require(emmeans)
riceHerbicide <- read.csv('dataset/riceHerbicide.csv')
riceHerbicide %>% str
se<-function(x) return( sd(x)/length(x) )
riceHerbicide %>%
group_by( treatment , applytime ) %>%
summarize( across( is.numeric, list('n' = length,'avg'=mean,'se'=se )))
se<-function(x) return( sd(x)/length(x) )
riceHerbicide %>%
group_by( treatment , applytime ) %>%
summarize( across( is.numeric, list('n' = length,'avg'=mean,'se'=se )))
se<-function(x) return( sd(x)/length(x) )
riceHerbicide %>%
group_by( treatment , applytime ) %>%
summarize( across( is.numeric, list('n' = length,'avg'=mean,'se'=se )))
se<-function(x) return( sd(x)/length(x) )
riceHerbicide %>%
group_by( treatment , applytime ) %>%
summarize( across( is.numeric, list('n' = length,'avg'=mean,'se'=se )))
se<-function(x) return( sd(x)/length(x) )
riceHerbicide %>%
group_by( treatment , applytime ) %>%
summarize( across( is.numeric, list('n' = length,'avg'=mean,'se'=se )))
require(tidyverse)
require(magrittr)
require(agricolae)
require(multcomp)
require(emmeans)
riceHerbicide <- read.csv('dataset/riceHerbicide.csv')
riceHerbicide %>% str
L2 <- LSD.test(m2, trt='treatment')
L2$group
# compaison: CK vs Herbicide
# 因子排列順序
riceHerbicide$treatment %>% levels()
riceHerbicide
riceHerbicide$treatment
# compaison: CK vs Herbicide
# 因子排列順序
riceHerbicide$treatment %>% levels()
riceHerbicide %<>%
mutate(treatment = as.factor(treatment),
applytime = as.factor(applytime),
rate = as.factor(rate),
rep = as.factor(rep))
riceHerbicide %>% str
# compaison: CK vs Herbicide
# 因子排列順序
riceHerbicide$treatment %>% levels()
# 特定線性模式
glht( m2 , linfct = mcp( treatment = 'Tukey')) %>%
summary
# 特定線性模式
cfm <- rbind(
'-5hand + Herbicide'     = c( 0 , -5 , 1 , 1 , 1 , 1 , 1 ),
'hand - Propanil/Bromoxynil' = c( 0 , 1  , 0 , 0 , 0 , -1, 0 ),
'hand - Propanil/Ioxynil'    = c( 0 , 1  , 0 , 0 , 0 , 0 , -1 ) )
glht( m2 , linfct = mcp( treatment = cfm)) %>%
summary
emmeans( m, ~ treatment)
m <- lm(formula = yield ~ treatment + rep, data = riceHerbicide)
emmeans( m, ~ treatment)
e
m <- lm(formula = yield ~ treatment + rep, data = riceHerbicide)
e <- emmeans( m, ~ treatment)
e
contrast(e , list( '5hand vs herbcide ' = c(0,5,-1,-1,-1,-1,-1)))
glht( m2 , linfct = mcp( treatment = cfm)) %>%
summary
glht( m2 , linfct = mcp( treatment = cfm))
glht( m2 , linfct = mcp( treatment = cfm)) %>%
summary
# 特定線性模式
cfm <- rbind(
'-5hand + Herbicide'     = c( 0 , -5 , 1 , 1 , 1 , 1 , 1 ) )
glht( m2 , linfct = mcp( treatment = cfm)) %>%
summary
# 特定線性模式
cfm <- rbind(
'-5hand + Herbicide'     = c( 0 , -5 , 1 , 1 , 1 , 1 , 1 ),
'hand - Propanil/Bromoxynil' = c( 0 , 1  , 0 , 0 , 0 , -1, 0 ),
'hand - Propanil/Ioxynil'    = c( 0 , 1  , 0 , 0 , 0 , 0 , -1 ) )
# 特定線性模式
cfm <- rbind(
'-5hand + Herbicide'     = c( 0 , -5 , 1 , 1 , 1 , 1 , 1 ),
'hand - Propanil/Bromoxynil' = c( 0 , 1  , 0 , 0 , 0 , -1, 0 ),
'hand - Propanil/Ioxynil'    = c( 0 , 1  , 0 , 0 , 0 , 0 , -1 ) )
glht( m2 , linfct = mcp( treatment = cfm)) %>%
summary
# 特定線性模式
cfm <- rbind(
'-5hand + Herbicide'     = c( 0 , -5 , 1 , 1 , 1 , 1 , 1 ))
glht( m2 , linfct = mcp( treatment = cfm)) %>%
summary
# 特定線性模式
cfm <- rbind(
'5hand - Herbicide' = c( 0 , 5 , -1 , -1 , -1 , -1 , -1 ))
glht( m2 , linfct = mcp( treatment = cfm)) %>%
summary
m2
glht( m2 , linfct = mcp( treatment = cfm)) %>%  summary
coef(m2)
# 特定線性模式
cfm <- rbind(
'5hand - Herbicide' = c( 0 , 5 , -1 , -1 , -1 , -1 , -1 ),
'CK vs others' = c( 6 , -1 , -1 , -1 , -1 , -1 , -1 ))
glht( m2 , linfct = mcp( treatment = cfm)) %>%  summary
contrast(e , list( 'hand vs herbicide'=c(0,5,-1,-1,-1,-1,-1),
'CK vs others'=c(6,-1,-1,-1,-1 ,-1,-1)))
# 特定線性模式
cfm <- rbind(
'5hand - Herbicide' = c( 0 , 5 , -1 , -1 , -1 , -1 , -1 ),
'CK vs others' = c( 6 , -1 , -1 , -1 , -1 , -1 , -1 ))
glht( m2 , linfct = mcp( treatment = cfm)) %>%  summary
?glht
glht( m2 , linfct = mcp( treatment = cfm)) %>%  summary
contrast(e , list( 'hand vs herbicide'=c(0,5,-1,-1,-1,-1,-1),
'CK vs others'=c(6,-1,-1,-1,-1 ,-1,-1)))
glht( m2 , linfct = mcp( treatment = cfm),adjusted='free') %>%  summary
glht( m2 , linfct = mcp( treatment = cfm),adjusted='free') %>%  summary
glht( m2 , linfct = mcp( treatment = cfm),adjusted(type ="free"))) %>%  summary
glht( m2 , linfct = mcp( treatment = cfm),adjusted(type ="free")) %>%  summary
glht( m2 , linfct = mcp( treatment = cfm),adjusted(type ="free")) %>%  summary
glht( m2 , linfct = mcp( treatment = cfm)) %>%  summary
glht( m2 , linfct = mcp( treatment = cfm) , type = 'free') %>%  summary
glht( m2 , linfct = mcp( treatment = cfm) ) %>%  summary
glht( m2 , linfct = mcp( treatment = cfm), test = adjusted('free') ) %>%  summary
glht( m2 , linfct = mcp( treatment = cfm), test = adjusted() ) %>%  summary
glht( m2 , linfct = mcp( treatment = cfm), test = adjusted() ) %>%  summary
glht( m2 , linfct = mcp( treatment = cfm) %>%  summary(.,test = adjusted('none'))
glht( m2 , linfct = mcp( treatment = cfm) %>%  summary(.,test = adjusted('none'))
glht( m2 , linfct = mcp( treatment = cfm)) %>%  summary(.,test = adjusted('none'))
'CK vs others'=c(6,-1,-1,-1,-1 ,-1,-1)))
glht( m2 , linfct = mcp( treatment = cfm)) %>%  summary(.,test = adjusted('none'))
contrast(e , list( 'hand vs herbicide'=c(0,5,-1,-1,-1,-1,-1),
'CK vs others'=c(6,-1,-1,-1,-1 ,-1,-1)))
glht( m2 , linfct = mcp( treatment = cfm)) %>%  summary
contrast(e , list( 'hand vs herbicide'=c(0,5,-1,-1,-1,-1,-1),
'CK vs others'=c(6,-1,-1,-1,-1 ,-1,-1)))
summary(summary , adjusted('free'))
g <- glht( m2 , linfct = mcp( treatment = cfm))
summary(summary , adjusted('free'))
summary(summary , type = adjusted('free'))
summary(summary , type = 'free')
g <- glht( m2 , linfct = mcp( treatment = cfm))
summary(summary , type = 'free')
summary(summary , test = adjusted( 'free'))
summary(g , test = adjusted('free') q)
summary(g , test = adjusted('free') )
summary(g , type = adjusted('free') )
summary(g , type = adjusted('none') )
summary(g , test = adjusted('free') )
summary(g , test = adjusted('none') )
# 特定線性模式
# glht
cfm <- rbind(
'5hand - Herbicide' = c( 0 , 5 , -1 , -1 , -1 , -1 , -1 ),
'CK vs others' = c( 6 , -1 , -1 , -1 , -1 , -1 , -1 ))
g <- glht( m2 , linfct = mcp( treatment = cfm))
summary(g , test = adjusted('none') )
# p = 0.53
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="02-describe.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
require(agricolae)
# 建立線性模式物件
m1 <- lm( data=iris , Sepal.Length~Species)
m1 <- lm( data=iris , Sepal.Length~Species)
lm( data=iris , Sepal.Length~Species)
# ANOVA
summary(aov(m1))
require(agricolae)
# 建立線性模式物件
m1 <- lm( data=iris , Sepal.Length~Species)
iris
data(iris)
# 建立線性模式物件
m1 <- lm( data=iris , Sepal.Length~Species)
require(agricolae)
data(iris)
# 建立線性模式物件
m1 <- lm( data=iris , Sepal.Length~Species)
# ANOVA
summary(aov(m1))
# LSD多重比較
L1 <- LSD.test( m1 , trt = 'Species')
L1$groups
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="02-describe.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="05-GLHG.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
sqrt
log
sqrt
iris$Sepal.Length
# 開根號
iris<-data(iris)
# 開根號
iris$Sepal.Length <- sqrt(iris$Sepal.Length)
Sepal.Length
iris
data(iris)
iris
sqrt(iris$Sepal.Length)
data(iris)
# 開根號
iris$Sepal.Length <- sqrt(iris$Sepal.Length)
# 取log
iris$Sepal.Length <- log(iris$Sepal.Length)
# 倒數根號
iris$Sepal.Length <- sqrt((iris$Sepal.Length)^(-1))
# 倒數
iris$Sepal.Length <- (iris$Sepal.Length)^(-1)
bookdown::render_book(input ="04-anova.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="04-anova.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="04-anova.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="05-GLHG.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="index.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="02-describe.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="03-ttest.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="04-anova.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="05-GLHG.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="index.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="02-describe.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="03-ttest.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="04-anova.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="05-GLHG.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="index.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
然而，多重比較並不是具有目的性的探討研究結果，若研究者在實驗中，對特別處理組之間的比較有興趣，應該要採用「計畫性的對比」，也就是線性對比。線性對比可以自訂不同處理平均值的比較，因此稱為計畫性對比。
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="02-describe.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="03-ttest.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="04-anova.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="05-GLHG.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="index.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
git push
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="02-describe.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="03-ttest.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="04-anova.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="05-GLHG.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="index.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="02-describe.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="03-ttest.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="04-anova.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="05-GLHG.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="index.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="01-intro.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
bookdown::render_book(input ="index.rmd" ,output_format ='bookdown::gitbook',encoding='UTF-8')
pkg <- 'ggplot2'
if ( !pkg %in% installed.packages()) install.packages(pkg)
library(ggplot2)
ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Petal.Width, color = Species))+
geom_jitter()+
geom_smooth(method='lm',se=F)+
theme_bw()+
labs(x='花萼長度(cm)',
y='花瓣寬度(cm)',
color = '品種',
title = '鳶尾花花萼長與花瓣寬線性關係')
# compaison: CK vs Herbicide
# 因子排列順序
riceHerbicide$treatment %>% levels()
coef(m)
# 特定線性模式
m <- lm(formula = yield ~ treatment + rep, data = riceHerbicide)
coef(m)
data.frame(coef(m))
apply(iris , 1 , mean)
apply(iris , 2 , mean)
iris
mean
apply(iris , 2 , mean)
sapply(iris  , mean)
apply(iris , 2 , mean)
2
apply(iris , 1 , mean)
apply(iris , 2 , mean)
lapply(iris , 2 , mean)
lapply(iris , 2 , mean)
lapply(iris ,  mean)
sapply(iris ,  mean)
sapply(iris ,  length)
# 各數值平均
apply(iris_df , mean)
# 各數值平均
apply(iris_df ,2, mean)
# 各數值平均
apply(iris ,2, mean)
# 各數值平均
apply(iris[1:4] ,2, mean)
# 各數值平均
# 因為第5欄是品種名稱，所以選取1~4欄[1:4]計算
apply(iris[1:4] ,2, mean)
split(iris , Species)
split(iris , 'Species')
split(iris , 'Species')
split(iris , 'Species')
?split(iris , 'Species')
split(iris , iris$Species)
split(iris , iris$Species)
apply(split(iris , iris$Species) , 2 , mean)
apply(split(iris , iris$Species) , 1 , mean)
# split 根據品種分組
split(iris , iris$Species)
apply( split(iris , iris$Species) ,2 ,apply( , 2 , mean))
lapply( split(iris , iris$Species) ,2 ,apply( , 2 , mean))
lapply( split(iris , iris$Species)  ,apply( , 2 , mean))
lapply( split(iris , iris$Species)  ,apply( .x, 2 , mean))
lapply( split(iris , iris$Species)  , function(x) apply( x, 2 , mean))
lapply( split(iris , iris$Species)[1:4]  , function(x) apply( x, 2 , mean))
lapply( split(iris , iris$Species)  , function(x) apply( x[1:4], 2 , mean))
# split 切開表格產生的list，將list物件依序傳入apply計算mean
lapply( split(iris , iris$Species)  , colMeans)
# split 切開表格產生的list，將list物件依序傳入apply計算mean
lapply( split(iris , iris$Species)  , function(x) colMeans(x[1:4]))
# split 切開表格產生的list，將list物件依序利用colMeans計算各column平均
myList <- split(iris , iris$Species)
lapply( myList, function(x) colMeans(x[1:4]))
?sapply
vapply
?vapply
?mapply
mapply(rep, 1:4, 4:1)
mapply(word, "A", integer()) # gave Error, now list()
mapply(rep, times = 1:4, x = 4:1)
?tapply
require(stats)
groups <- as.factor(rbinom(32, n = 5, prob = 0.4))
tapply(groups, groups, length)
groups
groups
groups
groups <- as.factor(rbinom(32, n = 5, prob = 0.4))
groups
groups
groups
groups
groups
groups
tapply(groups, groups, length)
index <- c("3", "4", "3", "2", "3", "4")
data_tapply <- tapply(data$height, index,mean)
data_tapply <- tapply(data$height, index,mean)
tapply(iris , iris$Species , mean)
tapply(iris , factor(iris$Species) , mean)
tapply(iris , as.factor(iris$Species) , mean)
unique(iris$Species)
tapply(iris, unique(iris$Species), mean)
lapply( myList, function(x) colMeans(x[1:4]))
myList[[1]]
data(mtcars)
split(mtcars  , mtcars$am)
sapply( myList , function(x) colMeans(x))
x
myList
myList <- split(mtcars  , mtcars$am)
myList
sapply( myList , function(x)
colMeans(x))
mtcars
?aggregate( mtcars , )
aggregate(. ~ vs+am,data=mtcars  )
aggregate( . ~ vs+am,
data=mtcars,
FUN = list(mean,length))
aggregate( . ~ vs+am,
data=mtcars,
FUN = mean)
aggregate( . ~ vs+am,
data=mtcars,
FUN = 'mean')
aggregate( . ~ vs+am,
data=mtcars,
FUN = c('mean','length'))
aggregate( . ~ vs+am,
data=mtcars,
FUN = c('mean','length'))
aggregate( . ~ vs+am,
data=mtcars,
FUN = c(mean,length))
aggregate( . ~ vs+am,
data=mtcars,
FUN = list(mean,length))
aggregate( . ~ vs+am,
data=mtcars,
list(mean,length))
aggregate( . ~ vs+am,
data=mtcars,
list('mean','length'))
aggregate( . ~ vs+am,
data=mtcars,
mean))
aggregate( . ~ vs+am,
data=mtcars,
mean)
sapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))
# 多對多分組計算
funlist <- list('mean','length','sd')
sapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))
lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))
lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))
Reduce(lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x)) , rbind)
Reduce(lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x)) , cbind)
Reduce(lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x)) , rbind)
lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))
lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))
# 多對多分組計算
funlist <- list(mean,length,sd)
lapply( funlist , function(x)
aggregate( . ~ vs+am,
data=mtcars, x)
)
Reduce
Reduce(rbind ,
lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))  )
Reduce(cbind ,
lapply( funlist , function(x) aggregate( . ~ vs+am,
data=mtcars,
x))  )
# 多對多分組計算
funlist <- list(mean,length,sd)
lapply( funlist , function(x)
z<-aggregate( . ~ vs+am,
data=mtcars, x)
colnames(z) <- paste0(colnames(z),as.character(x))
lapply( funlist , function(x)
z<-aggregate( . ~ vs+am,data=mtcars, x)
colnames(z) <- paste0(colnames(z),as.character(x))
lapply( funlist , function(x)
z<-aggregate( . ~ vs+am,data=mtcars, x)
colnames(z) <- paste0(colnames(z),as.character(x))
lapply( funlist , function(x)
z<-aggregate( . ~ vs+am,data=mtcars, x)
colnames(z) <- paste0(colnames(z),as.character(x))
colname
z <- aggregate( . ~ vs+am,data=mtcars, x)
# 多對多分組計算
funlist <- list(mean,length,sd)
lapply( funlist , function(x)
z <- aggregate( . ~ vs+am, data=mtcars, x)
colnames(z) <- paste0(colnames(z),as.character(x))
lapply( funlist , function(x)
z <- aggregate( . ~ vs+am, data=mtcars, x)
colnames(z) <- paste0(colnames(z),as.character(x))
lapply( funlist , function(x)
aggregate( . ~ vs+am, data=mtcars, x))
mtcars
aggregate( . ~ vs+am, data=mtcars,
FUN= function(x)
c("mean"= round(mean(x),2),
'±' = '±',
"SE"  = mean(x)/length(x),
'N'   = round(length(x),2),
"median" = round(median(x),2),
"SD"  = round(sd(x),2),
"CV"  = round(sd(x) / mean(x),2) ))
aggregate( . ~ vs+am, data=mtcars,
FUN= function(x)
c("mean"= round(mean(x),2),
'±' = '±',
"SE"  = mean(x)/length(x),
'N'   = round(length(x),2),
"median" = round(median(x),2),
"SD"  = round(sd(x),2),
"CV"  = round(sd(x) / mean(x),2) ))
